
final java.util.Random rnd = java.util.concurrent.ThreadLocalRandom.current();
final int size = 4096;
final int reps = 1_000_000;
final byte[] data = new byte[size];
rnd.nextBytes(data);

long start, end;
int hash = 0;

// xxHash throughput test

final net.jpountz.xxhash.XXHash32 xxhash = net.jpountz.xxhash.XXHashFactory.fastestInstance().hash32();
for(int j = 0; j < 4; j++) {
	start = System.nanoTime();
	for(int i = 0; i < reps; i++) {
		hash += xxhash.hash(data, 0, size, 0);
	}
	end = System.nanoTime();
	final long delta = end - start;
	final double secs = delta / 1_000_000_000d;
	final long megabytes = (long) size * reps / (2 << 20);
	System.out.println("xxHash: " + delta + " ns " + (megabytes / secs) + " MB/sec" );
}

// CRC32 throughput test

for(int j = 0; j < 4; j++) {
	start = System.nanoTime();
	for(int i = 0; i < reps; i++) {
		hash += net.dsys.commons.impl.lang.CRC32.digest(data, 0, size);
	}
	end = System.nanoTime();
	final long delta = end - start;
	final double secs = delta / 1_000_000_000d;
	final long megabytes = (long) size * reps / (2 << 20);
	System.out.println("CRC32: " + delta + " ns " + (megabytes / secs) + " MB/sec" );
}

// java CRC32 throughput test

final java.util.zip.CRC32 crc32 = new java.util.zip.CRC32();
for(int j = 0; j < 4; j++) {
	start = System.nanoTime();
	for(int i = 0; i < reps; i++) {
		crc32.reset();
		crc32.update(data, 0, size);
		hash += crc32.getValue();
	}
	end = System.nanoTime();
	final long delta = end - start;
	final double secs = delta / 1_000_000_000d;
	final long megabytes = (long) size * reps / (2 << 20);
	System.out.println("jCRC32: " + delta + " ns " + (megabytes / secs) + " MB/sec" );
}

// Adler32 throughput test

final java.util.zip.Adler32 adl32 = new java.util.zip.Adler32();
for(int j = 0; j < 4; j++) {
	start = System.nanoTime();
	for(int i = 0; i < reps; i++) {
		adl32.reset();
		adl32.update(data, 0, size);
		hash += adl32.getValue();
	}
	end = System.nanoTime();
	final long delta = end - start;
	final double secs = delta / 1_000_000_000d;
	final long megabytes = (long) size * reps / (2 << 20);
	System.out.println("Adler32: " + delta + " ns " + (megabytes / secs) + " MB/sec" );
}